from aiogram import Bot, Router, types, F

from bot.utils import ts_to_strdt, notify_admins
from bot.keyboards.user import user_menu
from bot.models import User, Team
from bot.models.enums import ReminderType
from bot.jobs.reminder import set_minor_reminder, set_major_reminder, set_confirmation_reminder


reminder_router = Router(name=__name__)


async def reschedule_reminder(type: ReminderType, user_id: int):
    match type:
        case ReminderType.MINOR:
            return await set_minor_reminder(user_id)
        case ReminderType.MAJOR:
            return await set_major_reminder(user_id)
        case _:
            return None

async def notify_admins_about_confirmation(choice: str, reminder_type: ReminderType, user: User, team: Team, bot: Bot):
    user_chat = await bot.get_chat(user.id)
    reminder_type_str = ReminderType.to_ukr(reminder_type)

    if choice == "yes":
        text = f"üëç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user_chat.username} –∑ –∫–æ–º–∞–Ω–¥–∏ <b>{team.name}</b> " \
        f"–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤, —â–æ –Ω–∞–¥—ñ—Å–ª–∞–≤ <b>{reminder_type_str}</b> –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º."
    else:
        text = f"üëé –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{user_chat.username} –∑ –∫–æ–º–∞–Ω–¥–∏ <b>{team.name}</b> " \
               f"–ø–µ—Ä–µ–¥—É–º–∞–≤ —Ä–æ–±–∏—Ç–∏ <b>{reminder_type_str}</b> –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."
    await notify_admins(bot, text)

@reminder_router.callback_query(F.data == "enrem")
async def enable_reminders(callback: types.CallbackQuery, user: User):
    await callback.message.delete_reply_markup()

    if await user.get_reminders():
        await callback.message.edit_text("‚ö†Ô∏è <b>–£ –≤–∞—Å —É–∂–µ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!</b> \n\n–Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ ‚Äì –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω–∞–º.")
        return

    minor_reminder = await set_minor_reminder(user.id)
    major_reminder = await set_major_reminder(user.id)

    await callback.message.answer(
        f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–¥–µ {ts_to_strdt(minor_reminder.remind_at)}, " \
        f"–∞ –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ ‚Äì {ts_to_strdt(major_reminder.remind_at)}! \n\n–£ –º–µ–Ω—é –∑–Ω–∏–∑—É –º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, " \
        "–∞ —Ç–∞–∫–æ–∂ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏ —á–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó üëá",
        reply_markup=user_menu
    )
    await callback.message.delete()

@reminder_router.callback_query(F.data.startswith("update:yes"))
async def handle_agree_update(callback: types.CallbackQuery, bot: Bot, user: User, team: Team):
    await callback.message.edit_text(text=callback.message.text + "\n\n‚úÖ <b>–ù–∞–¥—ñ—à–ª–µ–º–æ –Ω–æ–≤–∏–π –ø–æ—Å—Ç</b>")

    reminder_type = callback.data.split(":")[-1]
    confirmation_reminder = await set_confirmation_reminder(user.id, ReminderType[reminder_type])

    await callback.message.reply(f"–ß—É–¥–æ–≤–æ, {ts_to_strdt(confirmation_reminder.remind_at)} –±—É–¥–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏, —â–æ –ø–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ :)")

    await notify_admins(
        bot,
        f"üôã‚Äç‚ôÄÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{callback.from_user.username} –∑ –∫–æ–º–∞–Ω–¥–∏ {team.name} –≤–∏—Ä—ñ—à–∏–≤ —Ä–æ–±–∏—Ç–∏ <b>{ReminderType.to_ukr(reminder_type)}</b> –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    )

@reminder_router.callback_query(F.data.startswith("update:no"))
async def handle_deny_update(callback: types.CallbackQuery, bot: Bot, user: User, team: Team):
    await callback.message.edit_text(text=callback.message.text + "\n\n‚õî <b>–ù–µ –±—É–¥–µ–º–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏</b>")

    reminder_type = ReminderType[callback.data.split(":")[-1]]
    new_reminder = await reschedule_reminder(reminder_type, user.id)

    await callback.message.reply(f"–î–æ–±—Ä–µ, –Ω–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ‚Äì {ts_to_strdt(new_reminder.remind_at)}!")

    await notify_admins(
        bot,
        f"üôÖ‚Äç‚ôÄÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{callback.from_user.username} –∑ –∫–æ–º–∞–Ω–¥–∏ {team.name} –Ω–µ –±—É–¥–µ —Ä–æ–±–∏—Ç–∏ <b>{ReminderType.to_ukr(reminder_type)}</b> –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."
    )

@reminder_router.callback_query(F.data.startswith("confirmupd"))
async def handle_update_confirmation(callback: types.CallbackQuery, bot: Bot, user: User, team: Team):
    _, choice, reminder_type = callback.data.split(":")
    if choice == "yes":
        new_text = callback.message.text + "\n\n‚úÖ <b>–ù–∞–¥—ñ—Å–ª–∞–ª–∏</b>"
    else:
        new_text = callback.message.text + "\n\n‚õî <b>–ü–µ—Ä–µ–¥—É–º–∞–ª–∏</b>"
    await callback.message.edit_text(text=new_text)

    reminder_type = ReminderType[reminder_type]
    new_reminder = await reschedule_reminder(reminder_type, user.id)

    await callback.message.reply(f"–î–æ–±—Ä–µ, –Ω–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ‚Äì {ts_to_strdt(new_reminder.remind_at)}!")
    await notify_admins_about_confirmation(choice, reminder_type, user, team, bot)