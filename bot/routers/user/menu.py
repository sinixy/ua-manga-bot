from aiogram import Bot, Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.config import Config
from bot.keyboards.user import user_menu, user_team_menu
from bot.keyboards.common import confirmation_kb, cancel_kb
from bot.utils import ts_to_strdt, chat_to_str, delete_team, notify_admins
from bot.models import User, Team
from bot.models.enums import ReminderType


menu_router = Router(name=__name__)

class TeamMenu(StatesGroup):
    selected = State()
    team_name = State()
    confirm_deletion = State()


@menu_router.message(TeamMenu.selected)
async def handle_team_action(message: types.Message, state: FSMContext):
    match message.text.lower():
        case "–∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É":
            await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏:", reply_markup=cancel_kb)
            await state.set_state(TeamMenu.team_name)
        case "–≤–∏–¥–∞–ª–∏—Ç–∏":
            await message.answer("–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É?", reply_markup=confirmation_kb)
            await state.set_state(TeamMenu.confirm_deletion)
        case "–Ω–∞–∑–∞–¥":
            await message.answer("<b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é</b>", reply_markup=user_menu)
            await state.set_state(None)
        case _:
            await message.answer("–®–æ?")

@menu_router.message(TeamMenu.team_name)
async def process_team_name(message: types.Message, state: FSMContext, bot: Bot, team: Team):
    team_name = message.text
    if len(team_name) > Config.MAX_TEAM_NAME_LENGTH:
        await message.answer("–í–∏–±–∞—á, –∞–ª–µ –Ω–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞ :(\n\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        return
    existing_team = await Team.get(name=team_name)
    if existing_team:
        await message.answer(f"–í–∏–±–∞—á, –∞–ª–µ –∫–æ–º–∞–Ω–¥–∞ –∑ –Ω–∞–∑–≤–æ—é <b>{team_name}</b> –≤–∂–µ —ñ—Å–Ω—É—î :(\n\n–°–ø—Ä–æ–±—É–π —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ–≤.")
        return
    
    old_team_name = team.name
    await team.change_name(team_name)

    await state.set_state(None)
    await message.answer(f"–ù–∞–∑–≤—É –∫–æ–º–∞–Ω–¥–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>{team_name}</b>!", reply_markup=user_menu)
    await notify_admins(bot, f"üîÑ –ö–æ–º–∞–Ω–¥–∞ <b>{old_team_name}</b> (@{message.from_user.username}) –∑–º—ñ–Ω–∏–ª–∞ –Ω–∞–∑–≤—É –Ω–∞ <b>{team_name}</b>!")

@menu_router.callback_query(TeamMenu.confirm_deletion, F.data == "back")
@menu_router.callback_query(TeamMenu.team_name, F.data == "cancel")
async def cancel_team_name_input(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("<b>–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥–∏</b>", reply_markup=user_team_menu)
    await callback.message.delete()
    await state.set_state(TeamMenu.selected)

@menu_router.callback_query(TeamMenu.confirm_deletion, F.data == "confirm")
async def confirm_team_deletion(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_chat = callback.from_user
    await delete_team(user_chat.id, bot, f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_to_str(user_chat)} –≤–∏—Ä—ñ—à–∏–≤ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É")
    await callback.message.answer(
        "<b>–ö–æ–º–∞–Ω–¥—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!</b> \n\n–í–≤–µ–¥—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.message.delete()
    await state.clear()


@menu_router.message(F.text.lower() == "–∫–æ–º–∞–Ω–¥–∞")
async def open_team_menu(message: types.Message, state: FSMContext, team: Team):
    await message.answer(f"–í–∞—à–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ‚Äì {team.name}", reply_markup=user_team_menu)
    await state.set_state(TeamMenu.selected)

@menu_router.message(F.text.lower() == "–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
async def show_reminders(message: types.Message, user: User):
    reminders = await user.get_reminders()

    text = ""
    for r in reminders:
        text += f"<b>{ReminderType.to_ukr(r.type).capitalize()}</b> –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {ts_to_strdt(r.remind_at)}\n"

    if not text:
        text = "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ!"
    await message.answer(text)
